version: '3'

services:

  # postgres:
  #   container_name: postgres_container
  #   image: ankane/pgvector
  #   environment:
  #     POSTGRES_USER: ${POSTGRES_USER:-tdbm}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-admin}
  #     PGDATA: /data/postgres
  #   volumes:
  #      - .db/data/:/data/postgres
  #   ports:
  #     - "5432:5432"
  #   networks:
  #     - postgres
  #   restart: unless-stopped
  
  # pgadmin:
  #   container_name: pgadmin_container
  #   image: dpage/pgadmin4
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
  #     PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
  #     PGADMIN_CONFIG_SERVER_MODE: 'False'
  #   volumes:
  #      - ./db/pgadmin:/var/lib/pgadmin

  #   ports:
  #     - "${PGADMIN_PORT:-5050}:80"
  #   networks:
  #     - postgres
  #   restart: unless-stopped

  redis:
    image: redis
    networks:
      - deployml_network

  modelserver:
    image: tdbm/models
    build: 
      context: ./models
      dockerfile: Dockerfile
    depends_on:
      - redis
      # - postgres
    networks:
      - deployml_network
    env_file:
      - app.env
    environment:
      - SERVER_SLEEP=0.1 # Time in ms between each poll by model server against Redis
      - BATCH_SIZE=32
      - DATA_FOLDER=/mnt/data
    volumes:
      - ./data/:/mnt/data
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.role == worker

  webserver:
    image: tdbm/webserver
    build: ./webserver
    ports:
      - "11080:80"
    networks:
      - deployml_network
    depends_on:
      - redis
    env_file:
      - app.env
    environment:
      - CLIENT_SLEEP=0.1 # Time in ms between each poll by web server against Redis
      - CLIENT_MAX_TRIES=100 # Num tries by web server to retrieve results from Redis before giving up
    deploy:
      placement:
        constraints:
          - node.role == manager

  frontend:
    container_name: tdbm-frontend
    image: tdbm/frontend
    build:
      context: front
      dockerfile: Dockerfile
    networks:
      - deployml_network
    command: python -m flask run --host=0.0.0.0 --port=5000
    # depends_on:
      # - postgres
    ports:
      - "11081:5000"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.role == worker

networks:
  deployml_network:
  # postgres:
  #   driver: bridge

# volumes:
#     postgres:
#     pgadmin: